# -*- coding: utf-8 -*-
"""googlereview.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DS_qir1YNqEzxoIU89kI-RzmgBYlkgU0
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import re
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
nltk.download('stopwords')

from google.colab import files
uploaded = files.upload()

# Load dataset
df = pd.read_csv("googleplaystore.csv.zip")

# Remove rows with missing or invalid 'Rating'
df = df[df['Rating'].notnull()]
df['Rating'] = pd.to_numeric(df['Rating'], errors='coerce')
df = df[df['Rating'].notnull()]

# Create sentiment column based on Rating
def map_sentiment(rating):
    if rating >= 4.0:
        return 'positive'
    elif rating < 3.0:
        return 'negative'
    else:
        return 'neutral'

df['sentiment'] = df['Rating'].apply(map_sentiment)
df[['App', 'Rating', 'sentiment']].head()

from nltk.corpus import stopwords

def preprocess(text):
    text = str(text).lower()
    text = re.sub(r'\W', ' ', text)
    text = re.sub(r'\s+', ' ', text)
    text = ' '.join([word for word in text.split() if word not in stopwords.words('english')])
    return text

df['clean_text'] = df['App'].apply(preprocess)
df[['App', 'clean_text', 'sentiment']].head()

vectorizer = TfidfVectorizer(max_features=3000)
X = vectorizer.fit_transform(df['clean_text']).toarray()
y = df['sentiment']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Classification Report:\n")
print(classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()